import pygame
import random
import sys

# Init
pygame.init()
WIDTH, HEIGHT = 600, 800
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Dodge the Blocks")

# Colors
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (50, 150, 255)
BLACK = (0, 0, 0)

# Game objects
player_size = 50
player = pygame.Rect(WIDTH // 2, HEIGHT - 2 * player_size, player_size, player_size)
player_speed = 10

enemy_size = 50
enemy_list = []
enemy_speed = 5

clock = pygame.time.Clock()
score = 0
font = pygame.font.SysFont("Arial", 32)

def drop_enemies(enemy_list):
    delay = random.random()
    if len(enemy_list) < 10 and delay < 0.1:
        x_pos = random.randint(0, WIDTH - enemy_size)
        enemy_list.append(pygame.Rect(x_pos, 0, enemy_size, enemy_size))

def draw_enemies(enemy_list):
    for enemy in enemy_list:
        pygame.draw.rect(screen, RED, enemy)

def update_enemy_positions(enemy_list, score):
    for enemy in enemy_list[:]:
        enemy.y += enemy_speed
        if enemy.y > HEIGHT:
            enemy_list.remove(enemy)
            score += 1
    return score

def collision_check(enemy_list, player):
    for enemy in enemy_list:
        if player.colliderect(enemy):
            return True
    return False

# Main loop
game_over = False
while not game_over:
    screen.fill(BLACK)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and player.left > 0:
        player.x -= player_speed
    if keys[pygame.K_RIGHT] and player.right < WIDTH:
        player.x += player_speed

    drop_enemies(enemy_list)
    score = update_enemy_positions(enemy_list, score)

    if collision_check(enemy_list, player):
        game_over = True

    draw_enemies(enemy_list)
    pygame.draw.rect(screen, BLUE, player)

    score_text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(score_text, (10, 10))

    pygame.display.update()
    clock.tick(30)

# Game Over Screen
screen.fill(BLACK)
game_over_text = font.render("GAME OVER", True, WHITE)
final_score_text = font.render(f"Final Score: {score}", True, WHITE)
screen.blit(game_over_text, (WIDTH//2 - 100, HEIGHT//2 - 50))
screen.blit(final_score_text, (WIDTH//2 - 120, HEIGHT//2))
pygame.display.update()
pygame.time.wait(3000)
pygame.quit()
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow downloads and installs the latest version of Xanitizer, builds your project, runs a Xanitizer security analysis on it,
# and then archives the findings list reports and uploads the findings into the GitHub code scanning alert section of your repository.
#
# Documentation for the `RIGS-IT/xanitizer-action` is located here: https://github.com/RIGS-IT/xanitizer-action
#
# To use this basic workflow, you will need to complete the following setup steps:
#
# 1. The underlying Xanitizer, used in this workflow, needs a separate license file.
#    Licenses are free of charge for open source projects and for educational usage.
#    To get more information about the Xanitizer licenses and how to obtain a license file,
#    please consult https://www.xanitizer.com/xanitizer-pricing/.
#
# 2. The content of the license file has to be stored as a GitHub secret (e.g. XANITIZER_LICENSE) on this repository.
#    Please consult https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets for details.
#
# 3. Reference the GitHub secret in the step using the `RIGS-IT/xanitizer-action` GitHub action.
#    Example:
#    - name: Xanitizer Security Analysis
#      uses: RIGS-IT/xanitizer-action@v1
#      with:
#        license: ${{ secrets.XANITIZER_LICENSE }}
#
# 4. As a static application security testing (SAST) tool,
#    Xanitizer requires that all dependencies of the artifacts being analyzed can be resolved successfully.
#    So you have to install all used libraries and build your project before running the security analysis,
#    e.g. via `mvn compile` for Java or `npm install` for JavaScript

name: "Xanitizer Security Analysis"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '15 21 * * 0'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  xanitizer-security-analysis:
    # Xanitizer runs on ubuntu-latest and windows-latest.
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Set up the correct Java version for your project
      # Please comment out, if your project does not contain Java source code.
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'

      # Compile the code for Java projects and get all libraries, e.g. via Maven
      # Please adapt, if your project uses another build system to compile Java source code.
      # Please comment out, if your project does not contain Java source code.
      - name: Compile Java code
        run: mvn -B compile

      # Install all dependent libraries for JavaScript/TypeScript projects, e.g. via npm
      # Please adapt to run `npm install` in the correct directories.
      # Please adapt, if your project uses another package manager for getting JavaScript libraries.
      # Please comment out, if your project does not use a package manager for getting JavaScript libraries.
      - name: Install JavaScript libraries
        run: npm install

      # Run the security analysis with default settings
      - name: Xanitizer Security Analysis
        uses: RIGS-IT/xanitizer-action@87d13138fb113b727cbe040c744a15a2b4fe5316
        with:
          license: ${{ secrets.XANITIZER_LICENSE }}

      # Archiving the findings list reports
      - uses: actions/upload-artifact@v4
        with:
          name: Xanitizer-Reports
          path: |
            *-Findings-List.pdf
            *-Findings-List.sarif

      # Uploads the findings into the GitHub code scanning alert section using the upload-sarif action
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: Xanitizer-Findings-List.sarif
